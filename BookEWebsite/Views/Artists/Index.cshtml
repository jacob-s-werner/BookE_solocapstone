@model BookEWebsite.Models.Artist
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LookingForGigs)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GroupName)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => Model.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.LookingForGigs)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => Model.GroupName)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@Model.Id">Details</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>
<div id="map_wrapper">
    <div id="map" class="map"></div>
</div>

<script>
    var map;

    function initMap() {
        var InfoObject = [];

        map = new google.maps.Map(document.getElementById("map"), {
            center: new google.maps.LatLng( @Model.CenterLatitude,@Model.CenterLongitude),
            zoom: 13,
        });

        var iconBase =
            "https://maps.google.com/mapfiles/kml/paddle/";

        var icons = {
            comedy: {
                icon: iconBase + "grn-blank.png"
            },
            music: {
                icon: iconBase + "blu-blank.png"
            },
            sports: {
                icon: iconBase + "orange-blank.png"
            },
        };

        var markersOnMap = [
            @foreach (Business business in ViewBag.BusinessMarkers) {
                List<string> availStringList = new List<string>();
                @: {
                    @: businessId: @business.Id,
                    @: placeName: '@business.Name',
                    @: description: '@business.Description',
                    @: seatingCapacity: '@business.SeatingCapacity',
                    @: todayAvailability:
                    foreach (BusinessAvailability bAvailability in ViewBag.BusinessAvailabilities)
                    {
                        if (bAvailability.BusinessId.Equals(business.Id))
                        {
                            if (DateTime.Now.DayOfWeek.ToString() == bAvailability.DayOfWeek.ToString())
                            {
                                string timeString = $"{bAvailability.StartTime.ToShortTimeString()} - {bAvailability.EndTime.ToShortTimeString()}";
                                availStringList.Add(timeString);
                                //$"<a type=\"btn\" asp-action=\"BookTime\" asp-route-id=\"{bAvailability.Id}\" >Book Now</a></p>");
                            }
                        }
                    }

                    if (availStringList.Count() == 0)
                    {
                              @:"<p>No open times today...</p>",
                    }
                    else
                    {
                        foreach (var strng in availStringList)
                        {
                            @: "<p>@strng</p>" +
                        }
                            @: "",
                    }

                    @: LatLng: new google.maps.LatLng(@business.Address.Latitude, @business.Address.Longitude),
                    @: type: 'comedy'
                    @: },
             }
        ];

        addMarkerInfo(markersOnMap, icons, InfoObject);
    };

    function addMarkerInfo(markersOnMap, icons, InfoObject) {
        for (var i = 0; i < markersOnMap.length; i++) {
            var contentString =
                '<div class="info-window">' +
                    '<div class="info-heading"><h3>'+ markersOnMap[i].placeName +'</h3></div>'+
                    '<div class="info-body">' +
                        "<p>" + markersOnMap[i].description + "</p>" +
                        "<p><b>Seating Capacity:</b>" + " " + markersOnMap[i].seatingCapacity + "</p>" +
                        "<h6>Today's Hours</h6>" +
                        markersOnMap[i].todayAvailability +
                        '<p><a href="' + '@Url.Action("BusinessOpenings", "Artists")/' + markersOnMap[i].businessId + '" >See More Times</a></p>' +
                    "</div>" +
                "</div>";

            const marker = new google.maps.Marker({
                position: markersOnMap[i].LatLng,
                icon: icons[markersOnMap[i].type].icon,
                map: map
            })

            const infowindow = new google.maps.InfoWindow({
                content: contentString
            })

            marker.addListener('click', function () {
                closeOtherInfo(InfoObject);
                infowindow.open(map, marker);
                InfoObject[0] = infowindow;

            })
        }
    }

    function closeOtherInfo(InfoObject) {
        if (InfoObject.length > 0) {
            InfoObject[0].set("marker", null);
            InfoObject[0].close();
            InfoObject[0].length = 0;
        }
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@Secrets.GOOGLE_API_KEY&callback=initMap"
        async>
</script>